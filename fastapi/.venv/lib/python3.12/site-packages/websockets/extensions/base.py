from __future__ import annotations

<<<<<<< HEAD
from typing import List, Optional, Sequence, Tuple

from .. import frames
=======
from collections.abc import Sequence

from ..frames import Frame
>>>>>>> origin/main
from ..typing import ExtensionName, ExtensionParameter


__all__ = ["Extension", "ClientExtensionFactory", "ServerExtensionFactory"]


class Extension:
    """
    Base class for extensions.

    """

    name: ExtensionName
    """Extension identifier."""

<<<<<<< HEAD
    def decode(
        self,
        frame: frames.Frame,
        *,
        max_size: Optional[int] = None,
    ) -> frames.Frame:
=======
    def decode(self, frame: Frame, *, max_size: int | None = None) -> Frame:
>>>>>>> origin/main
        """
        Decode an incoming frame.

        Args:
<<<<<<< HEAD
            frame (Frame): incoming frame.
            max_size: maximum payload size in bytes.

        Returns:
            Frame: Decoded frame.

        Raises:
            PayloadTooBig: if decoding the payload exceeds ``max_size``.
=======
            frame: Incoming frame.
            max_size: Maximum payload size in bytes.

        Returns:
            Decoded frame.

        Raises:
            PayloadTooBig: If decoding the payload exceeds ``max_size``.
>>>>>>> origin/main

        """
        raise NotImplementedError

<<<<<<< HEAD
    def encode(self, frame: frames.Frame) -> frames.Frame:
=======
    def encode(self, frame: Frame) -> Frame:
>>>>>>> origin/main
        """
        Encode an outgoing frame.

        Args:
<<<<<<< HEAD
            frame (Frame): outgoing frame.

        Returns:
            Frame: Encoded frame.
=======
            frame: Outgoing frame.

        Returns:
            Encoded frame.
>>>>>>> origin/main

        """
        raise NotImplementedError


class ClientExtensionFactory:
    """
    Base class for client-side extension factories.

    """

    name: ExtensionName
    """Extension identifier."""

<<<<<<< HEAD
    def get_request_params(self) -> List[ExtensionParameter]:
=======
    def get_request_params(self) -> list[ExtensionParameter]:
>>>>>>> origin/main
        """
        Build parameters to send to the server for this extension.

        Returns:
<<<<<<< HEAD
            List[ExtensionParameter]: Parameters to send to the server.
=======
            Parameters to send to the server.
>>>>>>> origin/main

        """
        raise NotImplementedError

    def process_response_params(
        self,
        params: Sequence[ExtensionParameter],
        accepted_extensions: Sequence[Extension],
    ) -> Extension:
        """
        Process parameters received from the server.

        Args:
<<<<<<< HEAD
            params (Sequence[ExtensionParameter]): parameters received from
                the server for this extension.
            accepted_extensions (Sequence[Extension]): list of previously
                accepted extensions.

        Returns:
            Extension: An extension instance.

        Raises:
            NegotiationError: if parameters aren't acceptable.
=======
            params: Parameters received from the server for this extension.
            accepted_extensions: List of previously accepted extensions.

        Returns:
            An extension instance.

        Raises:
            NegotiationError: If parameters aren't acceptable.
>>>>>>> origin/main

        """
        raise NotImplementedError


class ServerExtensionFactory:
    """
    Base class for server-side extension factories.

    """

    name: ExtensionName
    """Extension identifier."""

    def process_request_params(
        self,
        params: Sequence[ExtensionParameter],
        accepted_extensions: Sequence[Extension],
<<<<<<< HEAD
    ) -> Tuple[List[ExtensionParameter], Extension]:
=======
    ) -> tuple[list[ExtensionParameter], Extension]:
>>>>>>> origin/main
        """
        Process parameters received from the client.

        Args:
<<<<<<< HEAD
            params (Sequence[ExtensionParameter]): parameters received from
                the client for this extension.
            accepted_extensions (Sequence[Extension]): list of previously
                accepted extensions.

        Returns:
            Tuple[List[ExtensionParameter], Extension]: To accept the offer,
            parameters to send to the client for this extension and an
            extension instance.

        Raises:
            NegotiationError: to reject the offer, if parameters received from
=======
            params: Parameters received from the client for this extension.
            accepted_extensions: List of previously accepted extensions.

        Returns:
            To accept the offer, parameters to send to the client for this
            extension and an extension instance.

        Raises:
            NegotiationError: To reject the offer, if parameters received from
>>>>>>> origin/main
                the client aren't acceptable.

        """
        raise NotImplementedError
